#!/usr/bin/env python3
"""
PowerPoint Generation from Jira Insights

This script generates PowerPoint presentations from the insights generated by GPT-4o
based on Jira data.
"""

import os
import json
import logging
from typing import Dict, List, Any, Optional, Union
from datetime import datetime
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("ppt_generator.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PowerPointGenerator:
    """
    A class to generate PowerPoint presentations from Jira insights.
    """
    
    def __init__(self, 
                 insights_dir: str = "insights",
                 output_dir: str = "presentations"):
        """
        Initialize the PowerPointGenerator.
        
        Args:
            insights_dir: Directory containing the insights JSON files
            output_dir: Directory to save the generated presentations
        """
        self.insights_dir = insights_dir
        self.output_dir = output_dir
        
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
        
        logger.info(f"Initialized PowerPointGenerator")
        logger.info(f"Insights directory: {insights_dir}")
        logger.info(f"Output directory: {output_dir}")
    
    def _load_json_file(self, filename: str) -> Dict:
        """
        Load data from a JSON file.
        
        Args:
            filename: Path to the JSON file
            
        Returns:
            Loaded data as dictionary
        """
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            logger.info(f"Loaded data from {filename}")
            return data
        
        except Exception as e:
            logger.error(f"Error loading data from {filename}: {e}")
            return {}
    
    def _add_title_slide(self, prs: Presentation, title: str, subtitle: str) -> None:
        """
        Add a title slide to the presentation.
        
        Args:
            prs: Presentation object
            title: Title text
            subtitle: Subtitle text
        """
        slide_layout = prs.slide_layouts[0]  # Title slide layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Set subtitle
        subtitle_shape = slide.placeholders[1]
        subtitle_shape.text = subtitle
    
    def _add_section_slide(self, prs: Presentation, title: str) -> None:
        """
        Add a section slide to the presentation.
        
        Args:
            prs: Presentation object
            title: Section title
        """
        slide_layout = prs.slide_layouts[2]  # Section header layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Format title
        for paragraph in title_shape.text_frame.paragraphs:
            paragraph.alignment = PP_ALIGN.CENTER
            for run in paragraph.runs:
                run.font.size = Pt(44)
                run.font.bold = True
    
    def _add_content_slide(self, prs: Presentation, title: str, content: str) -> None:
        """
        Add a content slide to the presentation.
        
        Args:
            prs: Presentation object
            title: Slide title
            content: Slide content
        """
        slide_layout = prs.slide_layouts[1]  # Title and content layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title_shape = slide.shapes.title
        title_shape.text = title
        
        # Set content
        content_shape = slide.placeholders[1]
        tf = content_shape.text_frame
        
        # Split content into paragraphs
        paragraphs = content.split('\n')
        
        # Add first paragraph
        p = tf.paragraphs[0]
        p.text = paragraphs[0] if paragraphs else ""
        
        # Add remaining paragraphs
        for para_text in paragraphs[1:]:
            if not para_text.strip():
                continue
                
            p = tf.add_paragraph()
            p.text = para_text
            
            # Check if this is a bullet point
            if para_text.strip().startswith('-') or para_text.strip().startswith('â€¢'):
                p.level = 1
    
    def _add_priority_slide(self, prs: Presentation, priorities: Dict[str, int]) -> None:
        """
        Add a slide showing issue priorities.
        
        Args:
            prs: Presentation object
            priorities: Dictionary mapping priority levels to counts
        """
        slide_layout = prs.slide_layouts[5]  # Title and chart layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title_shape = slide.shapes.title
        title_shape.text = "Issue Priorities"
        
        # Add content as text (in a real implementation, this would be a chart)
        content_shape = slide.placeholders[1]
        tf = content_shape.text_frame
        
        p = tf.paragraphs[0]
        p.text = "Priority Distribution:"
        
        for priority, count in priorities.items():
            p = tf.add_paragraph()
            p.text = f"{priority}: {count} issues"
            p.level = 1
    
    def _add_status_slide(self, prs: Presentation, statuses: Dict[str, int]) -> None:
        """
        Add a slide showing issue statuses.
        
        Args:
            prs: Presentation object
            statuses: Dictionary mapping status levels to counts
        """
        slide_layout = prs.slide_layouts[5]  # Title and chart layout
        slide = prs.slides.add_slide(slide_layout)
        
        # Set title
        title_shape = slide.shapes.title
        title_shape.text = "Issue Statuses"
        
        # Add content as text (in a real implementation, this would be a chart)
        content_shape = slide.placeholders[1]
        tf = content_shape.text_frame
        
        p = tf.paragraphs[0]
        p.text = "Status Distribution:"
        
        for status, count in statuses.items():
            p = tf.add_paragraph()
            p.text = f"{status}: {count} issues"
            p.level = 1
    
    def generate_general_presentation(self, insights_file: str = "general_insights.json") -> str:
        """
        Generate a PowerPoint presentation from general insights.
        
        Args:
            insights_file: Name of the insights JSON file
            
        Returns:
            Path to the generated presentation
        """
        logger.info(f"Generating general presentation from {insights_file}")
        
        # Load insights
        insights = self._load_json_file(os.path.join(self.insights_dir, insights_file))
        
        if not insights:
            logger.error(f"No insights found in {insights_file}")
            return ""
        
        # Create presentation
        prs = Presentation()
        
        # Add title slide
        self._add_title_slide(
            prs,
            "Jira Project Analysis",
            f"Generated on {datetime.now().strftime('%Y-%m-%d')}"
        )
        
        # Extract structured insights
        structured_insights = insights.get("structured_insights", {})
        
        # Add executive summary
        if "executive summary" in structured_insights:
            self._add_section_slide(prs, "Executive Summary")
            self._add_content_slide(
                prs,
                "Executive Summary",
                structured_insights["executive summary"]
            )
        
        # Add key metrics
        if "key metrics" in structured_insights:
            self._add_section_slide(prs, "Key Metrics")
            self._add_content_slide(
                prs,
                "Key Metrics",
                structured_insights["key metrics"]
            )
        
        # Add issue distribution analysis
        if "issue distribution analysis" in structured_insights:
            self._add_section_slide(prs, "Issue Distribution")
            self._add_content_slide(
                prs,
                "Issue Distribution Analysis",
                structured_insights["issue distribution analysis"]
            )
        
        # Add bottlenecks and blockers
        if "bottlenecks and blockers" in structured_insights:
            self._add_section_slide(prs, "Bottlenecks & Blockers")
            self._add_content_slide(
                prs,
                "Bottlenecks and Blockers",
                structured_insights["bottlenecks and blockers"]
            )
        
        # Add recommendations
        if "recommendations" in structured_insights:
            self._add_section_slide(prs, "Recommendations")
            self._add_content_slide(
                prs,
                "Recommendations",
                structured_insights["recommendations"]
            )
        
        # Save presentation
        output_file = os.path.join(self.output_dir, "jira_general_analysis.pptx")
        prs.save(output_file)
        
        logger.info(f"Saved general presentation to {output_file}")
        
        return output_file
    
    def generate_priority_presentation(self, insights_file: str = "priority_insights.json") -> str:
        """
        Generate a PowerPoint presentation from priority insights.
        
        Args:
            insights_file: Name of the insights JSON file
            
        Returns:
            Path to the generated presentation
        """
        logger.info(f"Generating priority presentation from {insights_file}")
        
        # Load insights
        insights = self._load_json_file(os.path.join(self.insights_dir, insights_file))
        
        if not insights:
            logger.error(f"No insights found in {insights_file}")
            return ""
        
        # Create presentation
        prs = Presentation()
        
        # Add title slide
        self._add_title_slide(
            prs,
            "Jira Priority Analysis",
            f"Generated on {datetime.now().strftime('%Y-%m-%d')}"
        )
        
        # Extract structured insights
        structured_insights = insights.get("structured_insights", {})
        
        # Add priority distribution
        if "priority distribution" in structured_insights:
            self._add_section_slide(prs, "Priority Distribution")
            self._add_content_slide(
                prs,
                "Priority Distribution",
                structured_insights["priority distribution"]
            )
        
        # Add high priority issues
        if "high priority issues" in structured_insights:
            self._add_section_slide(prs, "High Priority Issues")
            self._add_content_slide(
                prs,
                "High Priority Issues",
                structured_insights["high priority issues"]
            )
        
        # Add priority alignment
        if "priority alignment" in structured_insights:
            self._add_section_slide(prs, "Priority Alignment")
            self._add_content_slide(
                prs,
                "Priority Alignment",
                structured_insights["priority alignment"]
            )
        
        # Add priority trends
        if "priority trends" in structured_insights:
            self._add_section_slide(prs, "Priority Trends")
            self._add_content_slide(
                prs,
                "Priority Trends",
                structured_insights["priority trends"]
            )
        
        # Add recommendations
        if "recommendations" in structured_insights:
            self._add_section_slide(prs, "Recommendations")
            self._add_content_slide(
                prs,
                "Recommendations",
                structured_insights["recommendations"]
            )
        
        # Save presentation
        output_file = os.path.join(self.output_dir, "jira_priority_analysis.pptx")
        prs.save(output_file)
        
        logger.info(f"Saved priority presentation to {output_file}")
        
        return output_file
    
    def generate_team_presentation(self, insights_file: str = "team_insights.json") -> str:
        """
        Generate a PowerPoint presentation from team insights.
        
        Args:
            insights_file: Name of the insights JSON file
            
        Returns:
            Path to the generated presentation
        """
        logger.info(f"Generating team presentation from {insights_file}")
        
        # Load insights
        insights = self._load_json_file(os.path.join(self.insights_dir, insights_file))
        
        if not insights:
            logger.error(f"No insights found in {insights_file}")
            return ""
        
        # Create presentation
        prs = Presentation()
        
        # Add title slide
        self._add_title_slide(
            prs,
            "Jira Team Analysis",
            f"Generated on {datetime.now().strftime('%Y-%m-%d')}"
        )
        
        # Extract structured insights
        structured_insights = insights.get("structured_insights", {})
        
        # Add team workload
        if "team workload" in structured_insights:
            self._add_section_slide(prs, "Team Workload")
            self._add_content_slide(
                prs,
                "Team Workload",
                structured_insights["team workload"]
            )
        
        # Add team performance
        if "team performance" in structured_insights:
            self._add_section_slide(prs, "Team Performance")
            self._add_content_slide(
                prs,
                "Team Performance",
                structured_insights["team performance"]
            )
        
        # Add skill distribution
        if "skill distribution" in structured_insights:
            self._add_section_slide(prs, "Skill Distribution")
            self._add_content_slide(
                prs,
                "Skill Distribution",
                structured_insights["skill distribution"]
            )
        
        # Add collaboration patterns
        if "collaboration patterns" in structured_insights:
            self._add_section_slide(prs, "Collaboration Patterns")
            self._add_content_slide(
                prs,
                "Collaboration Patterns",
                structured_insights["collaboration patterns"]
            )
        
        # Add recommendations
        if "recommendations" in structured_insights:
            self._add_section_slide(prs, "Recommendations")
            self._add_content_slide(
                prs,
                "Recommendations",
                structured_insights["recommendations"]
            )
        
        # Save presentation
        output_file = os.path.join(self.output_dir, "jira_team_analysis.pptx")
        prs.save(output_file)
        
        logger.info(f"Saved team presentation to {output_file}")
        
        return output_file
    
    def generate_sprint_presentation(self, insights_file: str = "sprint_insights.json") -> str:
        """
        Generate a PowerPoint presentation from sprint insights.
        
        Args:
            insights_file: Name of the insights JSON file
            
        Returns:
            Path to the generated presentation
        """
        logger.info(f"Generating sprint presentation from {insights_file}")
        
        # Load insights
        insights = self._load_json_file(os.path.join(self.insights_dir, insights_
(Content truncated due to size limit. Use line ranges to read in chunks)